{"version":3,"sources":["BleService.ts"],"names":["BleService","constructor","manager","deviceId","connectToDevice","deviceDescriptor","device","utils","deviceDescriptorToDevice","isDeviceConnected","id","cancelDeviceConnection","discoverAllServicesAndCharacteristicsForDevice","stopDeviceScan","callback","scanOptions","scanMode","ScanMode","LowLatency","filteredCallback","err","console","log","JSON","stringify","manufacturerData","mfgId","Buffer","from","readInt16LE","BLUE_MAESTRO","MANUFACTURER_ID","BT510","descriptor","deviceToDeviceDescriptor","startDeviceScan","command","writeCharacteristicWithoutResponseForDevice","deviceType","BLUETOOTH_UART_SERVICE_UUID","BLUETOOTH_READ_CHARACTERISTIC_UUID","base64FromString","Promise","resolve","reject","subscription","monitorCharacteristicForDevice","BLUETOOTH_WRITE_CHARACTERISTIC_UUID","_","result","parser","data","done","alreadyDone","transmissionDone","val","str","stringFromBase64","pattern","test","monitoringCallback","value","push","remove","e","Error","message","monitor","monitorCharacteristic","writeCharacteristic","monitorCharacteristicCallback","macAddress","connectAndDiscoverServices","monitorCallback","buffer","concat","slice","map","datum","bufferFromBase64","ind","findIndex","i","readInt16BE","DELIMITER_A","DELIMITER_B","reduce","acc","index","time","temperature","TEMPERATURE_DIVISOR","parse","toString","numEvents","Number","prepareLogs","prepCommand","COMMAND_PREPARE_LOG","replace","writeWithSingleResponse","info","ackLogs","ackCommand","COMMAND_ACK_LOG","sensorLog","downloadCommand","COMMAND_DOWNLOAD","dataLog","writeAndMonitor","logBuffer","Math","round","eventType","readInt8","logInterval","COMMAND_UPDATE_LOG_INTERVAL","match","downloadLogs","COMMAND_BLINK","answer","monitorResultCallback","parsedBase64","defaultInfoLog","batteryLevel","isDisabled","blueMaestroBatteryLevel","batteryLevelStringOrNull","isNaN","normaliseNumber","bt510BatteryLevel","batteryVoltageMv","min","parsedIsDisabled","COMMAND_INFO","COMMAND_DISABLE_BUTTON","retriesLeft","error","getInfo","catch","getInfoWithRetries","toggleButton","toggleButtonWithRetries","downloadLogsWithRetries","blink","blinkWithRetries","updateLogInterval","updateLogIntervalWithRetries","setLogLevel","LogLevel","Verbose","BTUtilService"],"mappings":"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","sourcesContent":["import { BTUtilService } from '../BTUtilService';\n\nimport { Buffer } from 'buffer';\nimport { BLUE_MAESTRO, BT510 } from '../index';\nimport { MacAddress } from '../types/common';\nimport {\n  Characteristic,\n  ScanOptions,\n  ScanMode,\n  TypedDevice,\n  InfoLog,\n  MonitorCharacteristicCallback,\n  MonitorCharacteristicParser,\n  ScanCallback,\n  SensorLog,\n  DataLog,\n  LogLevel,\n  Device,\n  BleError,\n} from './types';\nimport { BluetoothManager } from './BleManager';\n\nexport class BleService {\n  manager: BluetoothManager;\n  utils: BTUtilService;\n\n  constructor(manager: BluetoothManager) {\n    this.manager = manager;\n    manager.setLogLevel(LogLevel.Verbose);\n    // Caller passes in utils from the main app,\n    // but we ignore it and use our own.\n    // This needs to be fixed in the main app.\n    this.utils = new BTUtilService();\n  }\n\n  connectToDevice = async (deviceId: string): Promise<void> => {\n    await this.manager.connectToDevice(deviceId);\n  };\n\n  connectAndDiscoverServices = async (deviceDescriptor: string): Promise<TypedDevice> => {\n    const device = this.utils.deviceDescriptorToDevice(deviceDescriptor);\n    if (await this.manager.isDeviceConnected(device.id)) {\n      await this.manager.cancelDeviceConnection(device.id);\n    }\n    await this.connectToDevice(device.id);\n\n    await this.manager.discoverAllServicesAndCharacteristicsForDevice(device.id);\n    return device;\n  };\n\n  stopScan = (): void => {\n    this.manager.stopDeviceScan();\n  };\n\n  scanForSensors = (callback: ScanCallback): void => {\n    const scanOptions: ScanOptions = { scanMode: ScanMode.LowLatency };\n    const filteredCallback = (err: BleError | null, device: Device | null): void => {\n      if (err) {\n        console.log('BleService Scan Error:', JSON.stringify(err));\n      }\n\n      if (device?.manufacturerData) {\n        const mfgId = Buffer.from(device.manufacturerData, 'base64').readInt16LE(0);\n        if (mfgId === BLUE_MAESTRO.MANUFACTURER_ID || mfgId === BT510.MANUFACTURER_ID) {\n          const descriptor = this.utils.deviceToDeviceDescriptor(device.id, mfgId);\n\n          callback(err, descriptor);\n        }\n      }\n    };\n    this.manager.startDeviceScan(null, scanOptions, filteredCallback);\n  };\n\n  writeCharacteristic = async (device: TypedDevice, command: string): Promise<Characteristic> => {\n    return this.manager.writeCharacteristicWithoutResponseForDevice(\n      device.id,\n      device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n      device.deviceType.BLUETOOTH_READ_CHARACTERISTIC_UUID,\n      this.utils.base64FromString(command)\n    );\n  };\n\n  monitorCharacteristic = (\n    device: TypedDevice,\n    callback: MonitorCharacteristicCallback<boolean | SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    return new Promise((resolve, reject) => {\n      const subscription = this.manager.monitorCharacteristicForDevice(\n        device.id,\n        device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n        device.deviceType.BLUETOOTH_WRITE_CHARACTERISTIC_UUID,\n        (_, result) => {\n          callback(result, resolve, reject, subscription);\n        }\n      );\n    });\n  };\n\n  writeAndMonitor = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string[], SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | InfoLog | SensorLog[] | DataLog> => {\n    const data: string[] = [];\n    let done = 0;\n    const alreadyDone = (): number => done++;\n\n    const transmissionDone = (val: string): boolean => {\n      const str = this.utils.stringFromBase64(val);\n      const pattern = /.*}$/;\n      const result = pattern.test(str);\n      return result;\n    };\n\n    const monitoringCallback: MonitorCharacteristicCallback<SensorLog[] | InfoLog | DataLog> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      if (result?.value) {\n        data.push(result.value);\n        // return to wait for next chunk\n        if (device.deviceType === BLUE_MAESTRO || !transmissionDone(result.value)) return;\n      }\n      try {\n        subscription.remove();\n        if (device.deviceType === BT510 && alreadyDone()) {\n          // Don't call the parser more than once.\n          // (Although it probably doesn't hurt anything,\n          // since the Promise has already resolved and returned the result\n          // to the caller)\n          return;\n        }\n        resolve(parser(data));\n      } catch (e) {\n        reject(new Error(`Parsing failed: ${e.message}`));\n      }\n    };\n\n    const monitor = this.monitorCharacteristic(device, monitoringCallback);\n    await this.writeCharacteristic(device, command);\n\n    return monitor;\n  };\n\n  writeWithSingleResponse = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string, boolean>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    const monitorCharacteristicCallback: MonitorCharacteristicCallback<boolean> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      if (result?.value) {\n        try {\n          subscription?.remove();\n          resolve(parser(result.value));\n        } catch (e) {\n          reject(new Error(`Parsing failed: ${e.message}`));\n        }\n      } else reject(new Error(`Command Failed`));\n    };\n    const monitor = this.monitorCharacteristic(device, monitorCharacteristicCallback);\n    await this.writeCharacteristic(device, command);\n\n    return monitor;\n  };\n\n  downloadLogs = async (macAddress: MacAddress): Promise<SensorLog[]> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const monitorCallback: MonitorCharacteristicParser<string[], SensorLog[] | DataLog> = (\n      data: string[]\n    ) => {\n      if (device.deviceType === BLUE_MAESTRO) {\n        const buffer = Buffer.concat(\n          data.slice(1).map(datum => this.utils.bufferFromBase64(datum))\n        );\n        const ind = buffer.findIndex(\n          (_, i) =>\n            (i % 2 === 0 && buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_A) ||\n            buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_B\n        );\n\n        return (buffer.slice(0, ind) as Buffer).reduce((acc: SensorLog[], _, index) => {\n          if (index % 2 !== 0) return acc;\n          return [\n            ...acc,\n            { time: '', temperature: buffer.readInt16BE(index) / BLUE_MAESTRO.TEMPERATURE_DIVISOR },\n          ];\n        }, []);\n      } else {\n        // BT510\n        const buffer = Buffer.concat(data.map(datum => this.utils.bufferFromBase64(datum)));\n        const result = JSON.parse(buffer.toString());\n        const numEvents = Number(result.result[0] / 8);\n        return { numEvents, data: result.result[1] };\n      }\n    }; // end monitor callback\n\n    if (device.deviceType === BT510) {\n      // const FIFO = '0';\n      // const LIFO = '1';\n\n      const prepareLogs = async (): Promise<boolean> => {\n        const prepCommand = BT510.COMMAND_PREPARE_LOG.replace('MODE', '0');\n        return (await this.writeWithSingleResponse(device, prepCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          const result = JSON.parse(info).result;\n          return !!result;\n        })) as boolean;\n      };\n      const ackLogs = async (numEvents: number): Promise<boolean> => {\n        const ackCommand = BT510.COMMAND_ACK_LOG.replace('NUMEVENTS', numEvents.toString());\n        return (await this.writeWithSingleResponse(device, ackCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          const result = !!(JSON.parse(info).result === numEvents);\n          if (!result) throw new Error(`BleService ${info}`);\n          return result;\n        })) as boolean;\n      };\n\n      let sensorLog = [] as SensorLog[];\n\n      while (await prepareLogs()) {\n        const downloadCommand = BT510.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n        const dataLog = (await this.writeAndMonitor(\n          device,\n          downloadCommand,\n          monitorCallback\n        )) as DataLog;\n        const logBuffer = this.utils.bufferFromBase64(dataLog.data);\n        const log = logBuffer.reduce((acc: SensorLog[], _, index) => {\n          if (index % 8 !== 0) return acc;\n          //const time = moment.unix(logBuffer.readInt32LE(index)).format('l HH:mm:ss');\n          //const time = logBuffer.readInt32LE(index);\n          const temperature =\n            Math.round((logBuffer.readInt16LE(index + 4) / BT510.TEMPERATURE_DIVISOR) * 10) / 10;\n          const eventType = logBuffer.readInt8(index + 6);\n          //const salt = logBuffer.readInt8(index + 7);\n          if (eventType === 1) {\n            // temperature\n            return [\n              ...acc,\n              {\n                temperature,\n                //                  eventType,\n                //                  salt,\n              },\n            ];\n          } else {\n            return [...acc];\n          }\n        }, []);\n\n        sensorLog = sensorLog.concat(log);\n        try {\n          await ackLogs(dataLog.numEvents);\n        } catch (e) {}\n      }\n      // The table only shows up on flipper, and then\n      // only the first 100 items are printed.\n      return sensorLog;\n    } else {\n      const command = BLUE_MAESTRO.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n      const result = (await this.writeAndMonitor(device, command, monitorCallback)) as SensorLog[];\n      return result;\n    }\n  };\n\n  updateLogInterval = async (macAddress: MacAddress, logInterval: number): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const command = device.deviceType.COMMAND_UPDATE_LOG_INTERVAL.replace(\n      'INTERVAL',\n      logInterval.toString()\n    );\n    const result = await this.writeWithSingleResponse(device, command, data => {\n      const info = this.utils.stringFromBase64(data);\n      return (\n        (device.deviceType === BT510 && JSON.parse(info).result === 'ok') ||\n        !!info.match(/interval/i)\n      );\n    });\n    // Clear logs\n    if (device.deviceType === BT510) {\n      this.downloadLogs(macAddress);\n    }\n    return !!result;\n  };\n\n  blink = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const result = (await this.writeWithSingleResponse(\n      device,\n      device.deviceType.COMMAND_BLINK,\n      data => {\n        const answer = this.utils.stringFromBase64(data);\n        return !!answer.match(/ok/i);\n      }\n    )) as boolean;\n\n    return result;\n  };\n\n  getInfo = async (macAddress: MacAddress): Promise<InfoLog> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const monitorResultCallback: MonitorCharacteristicParser<string[], InfoLog> = data => {\n      const parsedBase64 = data.map(this.utils.stringFromBase64);\n      const defaultInfoLog: InfoLog = { batteryLevel: null, isDisabled: true };\n\n      const blueMaestroBatteryLevel = (info: string): number | null => {\n        const batteryLevelStringOrNull = info.match(/Batt lvl: [0-9]{1,3}/);\n\n        if (!batteryLevelStringOrNull) return batteryLevelStringOrNull;\n\n        const batteryLevel = Number(batteryLevelStringOrNull[0].match(/[0-9]{1,3}/));\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(batteryLevel, [70, 100]);\n      };\n\n      const bt510BatteryLevel = (info: string): number | null => {\n        if (JSON.parse(info).result !== 'ok') {\n          /* {\"jsonrpc\":\"2.0\",\"id\":3,\"error\":{\"code\":-32602,\"message\":\"Attribute Not Found\"}} */\n          return null;\n        }\n\n        const batteryLevel = Number(JSON.parse(info).batteryVoltageMv);\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(Math.min(batteryLevel, 3000), [2100, 3000]);\n      };\n\n      const parsedIsDisabled = (info: string): boolean => !!info.match(/Btn on\\/off: 1/);\n\n      if (device.deviceType === BLUE_MAESTRO) {\n        return parsedBase64.reduce((acc, info) => {\n          const isDisabled = parsedIsDisabled(info);\n          const batteryLevel = blueMaestroBatteryLevel(info);\n          if (isDisabled) return { ...acc, isDisabled };\n          if (batteryLevel) return { ...acc, batteryLevel };\n          return acc;\n        }, defaultInfoLog);\n      } else {\n        return { batteryLevel: bt510BatteryLevel(parsedBase64[0]), isDisabled: true };\n      }\n    };\n\n    const result: InfoLog = (await this.writeAndMonitor(\n      device,\n      device.deviceType.COMMAND_INFO,\n      monitorResultCallback\n    )) as InfoLog;\n\n    return result;\n  };\n\n  toggleButton = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device.deviceType === BT510) {\n      // Laird doesn't have this command\n      return true;\n    }\n    const result = (await this.writeWithSingleResponse(\n      device,\n      BLUE_MAESTRO.COMMAND_DISABLE_BUTTON,\n      data => {\n        return !!this.utils.stringFromBase64(data).match(/ok/i);\n      }\n    )) as boolean;\n    return result;\n  };\n\n  getInfoWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<InfoLog> => {\n    if (!retriesLeft) throw error;\n\n    return this.getInfo(macAddress).catch(err =>\n      this.getInfoWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  toggleButtonWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.toggleButton(macAddress).catch(err =>\n      this.toggleButtonWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  downloadLogsWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<SensorLog[]> => {\n    if (!retriesLeft) throw error;\n\n    return this.downloadLogs(macAddress).catch(err =>\n      this.downloadLogsWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  blinkWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.blink(macAddress).catch(err =>\n      this.blinkWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  updateLogIntervalWithRetries = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.updateLogInterval(macAddress, logInterval).catch(err =>\n      this.updateLogIntervalWithRetries(macAddress, logInterval, retriesLeft - 1, err)\n    );\n  };\n}\n"]}