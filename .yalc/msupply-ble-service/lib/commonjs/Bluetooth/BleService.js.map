{"version":3,"sources":["BleService.ts"],"names":["BleService","constructor","manager","deviceId","connectToDevice","deviceDescriptor","device","utils","deviceDescriptorToDevice","isDeviceConnected","id","cancelDeviceConnection","discoverAllServicesAndCharacteristicsForDevice","stopDeviceScan","callback","scanOptions","scanMode","ScanMode","LowLatency","filteredCallback","err","console","log","JSON","stringify","manufacturerData","mfgId","Buffer","from","readInt16LE","BLUE_MAESTRO","MANUFACTURER_ID","BT510","descriptor","deviceToDeviceDescriptor","startDeviceScan","command","writeCharacteristicWithoutResponseForDevice","deviceType","BLUETOOTH_UART_SERVICE_UUID","BLUETOOTH_READ_CHARACTERISTIC_UUID","base64FromString","transactionId","Promise","resolve","reject","subscription","monitorCharacteristicForDevice","BLUETOOTH_WRITE_CHARACTERISTIC_UUID","_","result","Math","random","toString","substr","parser","data","done","alreadyDone","transmissionDone","val","str","stringFromBase64","pattern","test","monitoringCallback","value","push","remove","length","Error","e","message","monitor","monitorCharacteristic","all","writeCharacteristic","then","r","catch","cancelTransaction","monitorCharacteristicCallback","macAddress","connectAndDiscoverServices","monitorCallback","buffer","concat","slice","map","datum","bufferFromBase64","ind","findIndex","i","readInt16BE","DELIMITER_A","DELIMITER_B","reduce","acc","index","time","temperature","TEMPERATURE_DIVISOR","parse","numEvents","Number","prepareLogs","prepCommand","COMMAND_PREPARE_LOG","replace","writeWithSingleResponse","info","ackLogs","ackCommand","COMMAND_ACK_LOG","sensorLog","downloadCommand","COMMAND_DOWNLOAD","dataLog","writeAndMonitor","logBuffer","round","eventType","readInt8","logInterval","clearLogs","COMMAND_UPDATE_LOG_INTERVAL","match","downloadLogs","COMMAND_BLINK","answer","monitorResultCallback","parsedBase64","defaultInfoLog","batteryLevel","isDisabled","blueMaestroBatteryLevel","batteryLevelStringOrNull","isNaN","normaliseNumber","bt510BatteryLevel","parsedInfo","batteryVoltageMv","min","parsedIsDisabled","COMMAND_INFO","COMMAND_DISABLE_BUTTON","retriesLeft","error","getInfo","getInfoWithRetries","toggleButton","toggleButtonWithRetries","downloadLogsWithRetries","blink","blinkWithRetries","updateLogInterval","updateLogIntervalWithRetries","setLogLevel","LogLevel","Verbose","BTUtilService"],"mappings":"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","sourcesContent":["import { BTUtilService } from '../BTUtilService';\n\nimport { Buffer } from 'buffer';\nimport { BLUE_MAESTRO, BT510 } from '../index';\nimport { MacAddress } from '../types/common';\nimport {\n  Characteristic,\n  ScanOptions,\n  ScanMode,\n  TypedDevice,\n  InfoLog,\n  MonitorCharacteristicCallback,\n  MonitorCharacteristicParser,\n  ScanCallback,\n  SensorLog,\n  DataLog,\n  LogLevel,\n  Device,\n  BleError,\n} from './types';\nimport { BluetoothManager, MockOrRealDevice } from './BleManager';\n\nexport class BleService {\n  manager: BluetoothManager;\n  utils: BTUtilService;\n\n  constructor(manager: BluetoothManager) {\n    this.manager = manager;\n    manager.setLogLevel(LogLevel.Verbose);\n    // Caller passes in utils from the main app,\n    // but we ignore it and use our own.\n    // This needs to be fixed in the main app.\n    this.utils = new BTUtilService();\n  }\n\n  connectToDevice = (deviceId: string): Promise<MockOrRealDevice> => {\n    return this.manager.connectToDevice(deviceId);\n  };\n\n  connectAndDiscoverServices = async (deviceDescriptor: string): Promise<TypedDevice> => {\n    const device = this.utils.deviceDescriptorToDevice(deviceDescriptor);\n    if (await this.manager.isDeviceConnected(device.id)) {\n      await this.manager.cancelDeviceConnection(device.id);\n    }\n    await this.connectToDevice(device.id);\n\n    await this.manager.discoverAllServicesAndCharacteristicsForDevice(device.id);\n    return device;\n  };\n\n  stopScan = (): void => {\n    this.manager.stopDeviceScan();\n  };\n\n  scanForSensors = (callback: ScanCallback): void => {\n    const scanOptions: ScanOptions = { scanMode: ScanMode.LowLatency };\n    const filteredCallback = (err: BleError | null, device: Device | null): void => {\n      if (err) {\n        console.log('BleService Scan Error:', JSON.stringify(err));\n      }\n\n      if (device?.manufacturerData) {\n        const mfgId = Buffer.from(device.manufacturerData, 'base64').readInt16LE(0);\n        if (mfgId === BLUE_MAESTRO.MANUFACTURER_ID || mfgId === BT510.MANUFACTURER_ID) {\n          const descriptor = this.utils.deviceToDeviceDescriptor(device.id, mfgId);\n\n          callback(err, descriptor);\n        }\n      }\n    };\n    this.manager.startDeviceScan(null, scanOptions, filteredCallback);\n  };\n\n  writeCharacteristic = async (device: TypedDevice, command: string): Promise<Characteristic> => {\n    return this.manager.writeCharacteristicWithoutResponseForDevice(\n      device.id,\n      device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n      device.deviceType.BLUETOOTH_READ_CHARACTERISTIC_UUID,\n      this.utils.base64FromString(command)\n    );\n  };\n\n  monitorCharacteristic = (\n    device: TypedDevice,\n    callback: MonitorCharacteristicCallback<boolean | SensorLog[] | InfoLog | DataLog>,\n    transactionId: string\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    return new Promise((resolve, reject) => {\n      const subscription = this.manager.monitorCharacteristicForDevice(\n        device.id,\n        device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n        device.deviceType.BLUETOOTH_WRITE_CHARACTERISTIC_UUID,\n        (_, result) => {\n          callback(result, resolve, reject, subscription);\n        },\n        transactionId\n      );\n    });\n  };\n\n  // https://gist.github.com/gordonbrander/2230317\n  transactionId = () => '_' + Math.random().toString(36).substr(2, 9);\n\n  writeAndMonitor = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string[], SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | InfoLog | SensorLog[] | DataLog> => {\n    const data: string[] = [];\n    let done = 0;\n    const alreadyDone = (): number => done++;\n\n    const transmissionDone = (val: string): boolean => {\n      const str = this.utils.stringFromBase64(val);\n      const pattern = /.*}$/;\n      const result = pattern.test(str);\n      return result;\n    };\n\n    const monitoringCallback: MonitorCharacteristicCallback<SensorLog[] | InfoLog | DataLog> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      if (result?.value) {\n        data.push(result.value);\n        // return to wait for next chunk\n        if (device.deviceType === BLUE_MAESTRO || !transmissionDone(result.value)) return;\n      }\n      try {\n        subscription.remove();\n        if (device.deviceType === BT510 && alreadyDone()) {\n          // Don't call the parser more than once.\n          // (Although it probably doesn't hurt anything,\n          // since the Promise has already resolved and returned the result\n          // to the caller)\n          return;\n        }\n        if (data.length === 0) throw new Error(' callback no data returned');\n        resolve(parser(data));\n      } catch (e) {\n        reject(new Error(` callback parsing failed, ${e.message}`));\n      }\n    }; // end monitoringCallback\n\n    const transactionId = this.transactionId();\n    const monitor = this.monitorCharacteristic(device, monitoringCallback, transactionId);\n    // We only care about the result if both the write and monitor succeed.\n    return Promise.all([monitor, this.writeCharacteristic(device, command)])\n      .then(r => r[0])\n      .catch(e => {\n        this.manager.cancelTransaction(transactionId);\n        throw new Error(` writeAndMonitor rejected, ${device.id} ${e.message}`);\n      });\n  };\n\n  writeWithSingleResponse = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string, boolean>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    const monitorCharacteristicCallback: MonitorCharacteristicCallback<boolean> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      subscription?.remove();\n      if (result?.value) {\n        try {\n          resolve(parser(result.value));\n        } catch (e) {\n          reject(new Error(` callback parsing failed: ${e.message}`));\n        }\n      } else reject(new Error(` callback returns null`));\n    }; // end monitorCharacteristicCallback\n\n    const transactionId = this.transactionId();\n    const monitor = this.monitorCharacteristic(\n      device,\n      monitorCharacteristicCallback,\n      transactionId\n    );\n    // We only care about the result if both the write and monitor succeed.\n    return Promise.all([monitor, this.writeCharacteristic(device, command)])\n      .then(r => r[0])\n      .catch(e => {\n        this.manager.cancelTransaction(transactionId);\n        throw new Error(` writeWithSingleResponse rejected, ${device.id} ${e.message}`);\n      });\n  };\n\n  downloadLogs = async (macAddress: MacAddress): Promise<SensorLog[]> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const monitorCallback: MonitorCharacteristicParser<string[], SensorLog[] | DataLog> = (\n      data: string[]\n    ) => {\n      if (device.deviceType === BLUE_MAESTRO) {\n        const buffer = Buffer.concat(\n          data.slice(1).map(datum => this.utils.bufferFromBase64(datum))\n        );\n        const ind = buffer.findIndex(\n          (_, i) =>\n            (i % 2 === 0 && buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_A) ||\n            buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_B\n        );\n\n        return (buffer.slice(0, ind) as Buffer).reduce((acc: SensorLog[], _, index) => {\n          if (index % 2 !== 0) return acc;\n          return [\n            ...acc,\n            { time: '', temperature: buffer.readInt16BE(index) / BLUE_MAESTRO.TEMPERATURE_DIVISOR },\n          ];\n        }, []);\n      } else {\n        // BT510\n        const buffer = Buffer.concat(data.map(datum => this.utils.bufferFromBase64(datum)));\n        const result = JSON.parse(buffer.toString());\n        const numEvents = Number(result.result[0] / 8);\n        return { numEvents, data: result.result[1] };\n      }\n    }; // end monitor callback\n\n    if (device.deviceType === BT510) {\n      // const FIFO = '0';\n      // const LIFO = '1';\n\n      const prepareLogs = async (): Promise<boolean> => {\n        const prepCommand = BT510.COMMAND_PREPARE_LOG.replace('MODE', '0');\n\n        return (await this.writeWithSingleResponse(device, prepCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          return JSON.parse(info).result !== 0;\n        })) as boolean;\n      };\n      const ackLogs = async (numEvents: number): Promise<boolean> => {\n        const ackCommand = BT510.COMMAND_ACK_LOG.replace('NUMEVENTS', numEvents.toString());\n        return (await this.writeWithSingleResponse(device, ackCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          return JSON.parse(info).result === numEvents;\n        })) as boolean;\n      };\n\n      let sensorLog = [] as SensorLog[];\n      try {\n        while (await prepareLogs()) {\n          const downloadCommand = BT510.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n          const dataLog = (await this.writeAndMonitor(\n            device,\n            downloadCommand,\n            monitorCallback\n          )) as DataLog;\n          const logBuffer = this.utils.bufferFromBase64(dataLog.data);\n\n          const log = logBuffer.reduce((acc: SensorLog[], _, index) => {\n            if (index % 8 !== 0) return acc;\n            //const time = logBuffer.readInt32LE(index);\n            const temperature =\n              Math.round((logBuffer.readInt16LE(index + 4) / BT510.TEMPERATURE_DIVISOR) * 10) / 10;\n            const eventType = logBuffer.readInt8(index + 6);\n            //const salt = logBuffer.readInt8(index + 7);\n            if (eventType === 1) {\n              return [\n                ...acc,\n                {\n                  temperature,\n                },\n              ];\n            } else {\n              return [...acc];\n            }\n          }, []);\n\n          if (await ackLogs(dataLog.numEvents)) {\n            sensorLog = sensorLog.concat(log);\n          }\n        }\n      } catch (e) {\n        if (sensorLog.length === 0) {\n          throw new Error(`downloadLogs ${e.message}`);\n        }\n        // But if we partially succeeded, return that\n      }\n      return sensorLog;\n    } else {\n      const command = BLUE_MAESTRO.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n      const result = (await this.writeAndMonitor(device, command, monitorCallback)) as SensorLog[];\n      return result;\n    }\n  };\n\n  updateLogInterval = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    clearLogs = true\n  ): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const command = device.deviceType.COMMAND_UPDATE_LOG_INTERVAL.replace(\n      'LOG_INTERVAL',\n      logInterval.toString()\n    );\n    const result = await this.writeWithSingleResponse(device, command, data => {\n      const info = this.utils.stringFromBase64(data);\n      return (\n        (device.deviceType === BT510 && JSON.parse(info).result === 'ok') ||\n        !!info.match(/interval/i)\n      );\n    });\n    // Clear logs if we haven't just downloaded\n    // BlueMaestro automatically clears logs when log interval is set,\n    // But we have to download all the logs to clear them on BT510\n    if (clearLogs && device.deviceType === BT510) {\n      await this.downloadLogs(macAddress);\n    }\n    if (result) return true;\n    throw new Error(` command returned not OK result`);\n  };\n\n  blink = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const result = (await this.writeWithSingleResponse(\n      device,\n      device.deviceType.COMMAND_BLINK,\n      data => {\n        const answer = this.utils.stringFromBase64(data);\n        return !!answer.match(/ok/i);\n      }\n    )) as boolean;\n\n    if (result) return true;\n    throw new Error(` acknowledgement false`);\n  };\n\n  getInfo = async (macAddress: MacAddress): Promise<InfoLog> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const monitorResultCallback: MonitorCharacteristicParser<string[], InfoLog> = data => {\n      const parsedBase64 = data.map(this.utils.stringFromBase64);\n      const defaultInfoLog: InfoLog = { batteryLevel: null, isDisabled: true };\n      const blueMaestroBatteryLevel = (info: string): number | null => {\n        const batteryLevelStringOrNull = info.match(/Batt lvl: [0-9]{1,3}/);\n\n        if (!batteryLevelStringOrNull) return batteryLevelStringOrNull;\n\n        const batteryLevel = Number(batteryLevelStringOrNull[0].match(/[0-9]{1,3}/));\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(batteryLevel, [75, 100]);\n      };\n\n      const bt510BatteryLevel = (info: string): number | null => {\n        let batteryLevel = null;\n        if (info) {\n          const parsedInfo = JSON.parse(info);\n\n          if (parsedInfo?.result !== 'ok') {\n            return null;\n          }\n\n          batteryLevel = Number(parsedInfo.batteryVoltageMv);\n        } else {\n          return null;\n        }\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(Math.min(batteryLevel, 3000), [2250, 3000]);\n      };\n\n      const parsedIsDisabled = (info: string): boolean => !!info.match(/Btn on\\/off: 1/);\n\n      if (device.deviceType === BLUE_MAESTRO) {\n        return parsedBase64.reduce((acc, info) => {\n          const isDisabled = parsedIsDisabled(info);\n          const batteryLevel = blueMaestroBatteryLevel(info);\n          if (isDisabled) return { ...acc, isDisabled };\n          if (batteryLevel) return { ...acc, batteryLevel };\n          return acc;\n        }, defaultInfoLog);\n      } else {\n        return { batteryLevel: bt510BatteryLevel(parsedBase64[0]), isDisabled: true };\n      }\n    };\n\n    const result: InfoLog = (await this.writeAndMonitor(\n      device,\n      device.deviceType.COMMAND_INFO,\n      monitorResultCallback\n    )) as InfoLog;\n\n    return result;\n  };\n\n  toggleButton = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device.deviceType === BT510) {\n      // Laird doesn't have this command\n      return true;\n    }\n    const result = (await this.writeWithSingleResponse(\n      device,\n      BLUE_MAESTRO.COMMAND_DISABLE_BUTTON,\n      data => {\n        return !!this.utils.stringFromBase64(data).match(/ok/i);\n      }\n    )) as boolean;\n    return result;\n  };\n\n  getInfoWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<InfoLog> => {\n    if (!retriesLeft) throw error;\n\n    return this.getInfo(macAddress).catch(err =>\n      this.getInfoWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  toggleButtonWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.toggleButton(macAddress).catch(err =>\n      this.toggleButtonWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  downloadLogsWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<SensorLog[]> => {\n    if (!retriesLeft) throw error;\n\n    return this.downloadLogs(macAddress).catch(err =>\n      this.downloadLogsWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  blinkWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.blink(macAddress).catch(err =>\n      this.blinkWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  updateLogIntervalWithRetries = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    retriesLeft: number,\n    clearLogs: boolean,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.updateLogInterval(macAddress, logInterval, clearLogs).catch(err =>\n      this.updateLogIntervalWithRetries(macAddress, logInterval, retriesLeft - 1, clearLogs, err)\n    );\n  };\n}\n"]}