{"version":3,"sources":["BTUtilService.ts"],"names":["BTUtilService","celsius","Math","round","base64","Buffer","from","bufferFromBase64","toString","string","currentVal","oldRange","newRange","oldMin","oldMax","newMin","newMax","newVal","floor"],"mappings":";;AAAA;AACA;AACA;AACA;AAIA,OAAO,MAAMA,aAAN,CAAoB;AAAA;AAAA,0CAITC,OAAD,IAA6BC,IAAI,CAACC,KAAL,CAAYF,OAAO,GAAG,GAAX,GAAkB,GAA7B,IAAoC,KAJvD;;AAAA,8CAMLG,MAAD,IAA4BC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,QAApB,CANtB;;AAAA,8CAQLA,MAAD,IAA4B,KAAKG,gBAAL,CAAsBH,MAAtB,EAA8BI,QAA9B,CAAuC,OAAvC,CARtB;;AAAA,8CAULC,MAAD,IAA4BJ,MAAM,CAACC,IAAP,CAAYG,MAAZ,EAAoB,OAApB,EAA6BD,QAA7B,CAAsC,QAAtC,CAVtB;;AAAA,6CAeP,CAACE,UAAD,EAAqBC,QAArB,EAA4CC,QAAQ,GAAG,CAAC,CAAD,EAAI,GAAJ,CAAvD,KAA4E;AAC5F,YAAM,CAACC,MAAD,EAASC,MAAT,IAAmBH,QAAzB;AACA,YAAM,CAACI,MAAD,EAASC,MAAT,IAAmBJ,QAAzB;AAEA,YAAMK,MAAM,GAAI,CAACP,UAAU,GAAGG,MAAd,KAAyBG,MAAM,GAAGD,MAAlC,CAAD,IAA+CD,MAAM,GAAGD,MAAxD,IAAkEE,MAAjF;AAEA,aAAOb,IAAI,CAACgB,KAAL,CAAWD,MAAX,CAAP;AACD,KAtBwB;AAAA;;AAAA","sourcesContent":["// This just here to satisfy TS for now\n// We're really using the UtilService passed into the bleService constructor\n// By the main app\n//\n\ntype NumberRange = [number, number];\n\nexport class BTUtilService {\n  /**\n   * Convert to Fahrenheit\n   */\n  toFahrenheit = (celsius: number): number => Math.round((celsius * 9.0) / 5.0) + 320.0;\n\n  bufferFromBase64 = (base64: string): Buffer => Buffer.from(base64, 'base64');\n\n  stringFromBase64 = (base64: string): string => this.bufferFromBase64(base64).toString('utf-8');\n\n  base64FromString = (string: string): string => Buffer.from(string, 'utf-8').toString('base64');\n  /**\n   * Normalises a number within some number range i.e. [75-100] into the corresponding\n   * number within 0-100.\n   */\n  normaliseNumber = (currentVal: number, oldRange: NumberRange, newRange = [0, 100]): number => {\n    const [oldMin, oldMax] = oldRange;\n    const [newMin, newMax] = newRange;\n\n    const newVal = ((currentVal - oldMin) * (newMax - newMin)) / (oldMax - oldMin) + newMin;\n\n    return Math.floor(newVal);\n  };\n}\n"]}