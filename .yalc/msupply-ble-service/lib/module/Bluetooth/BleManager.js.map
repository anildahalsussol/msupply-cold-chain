{"version":3,"sources":["BleManager.ts"],"names":["BleManager","BlePlxManager"],"mappings":"AACA,SACEA,UAAU,IAAIC,aADhB,QAQO,sBARP;AAwCA,OAAO,MAAMD,UAAU,GAAIC,aAApB","sourcesContent":["import { MacAddress } from '../types/common';\nimport {\n  BleManager as BlePlxManager,\n  Subscription,\n  Characteristic,\n  BleError,\n  Device,\n  ScanOptions,\n  LogLevel,\n} from 'react-native-ble-plx';\nimport { BluetoothDevice } from './types';\n\nexport declare class BluetoothManager {\n  setLogLevel(logLevel: LogLevel): void;\n  logLevel(): Promise<LogLevel>;\n  connectToDevice(macAddress: MacAddress): Promise<BluetoothDevice>;\n  isDeviceConnected(macAddress: MacAddress): Promise<boolean>;\n  cancelDeviceConnection(macAddress: MacAddress): Promise<BluetoothDevice>;\n  discoverAllServicesAndCharacteristicsForDevice(macAddress: MacAddress): Promise<BluetoothDevice>;\n  stopDeviceScan(): void;\n  startDeviceScan(\n    UUIDs: string[] | null,\n    options: ScanOptions | null,\n    listener: (error: BleError | null, scannedDevice: Device | null) => void\n  ): void;\n  writeCharacteristicWithoutResponseForDevice(\n    deviceIdentifier: string,\n    serviceUUID: string,\n    characteristicUUID: string,\n    base64Value: string,\n    transactionId?: string\n  ): Promise<Characteristic>;\n  monitorCharacteristicForDevice(\n    deviceIdentifier: string,\n    serviceUUID: string,\n    characteristicUUID: string,\n    listener: (error: BleError | null, characteristic: Characteristic | null) => void,\n    transactionId?: string\n  ): Subscription;\n}\n\nexport const BleManager = (BlePlxManager as unknown) as typeof BluetoothManager;\n"]}