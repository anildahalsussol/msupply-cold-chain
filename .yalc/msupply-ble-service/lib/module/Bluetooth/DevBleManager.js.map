{"version":3,"sources":["DevBleManager.ts"],"names":["LogLevel","COMMAND_TO_RESULT_LOOKUP","callback","value","KmJsaW5r","KmJk","DevBleManager","constructor","None","connectedDevices","registeredCallbacks","isScanning","scannerInterval","logLevel","level","setLogLevel","connectToDevice","macAddress","id","console","log","isDeviceConnected","cancelDeviceConnection","device","Error","discoverAllServicesAndCharacteristicsForDevice","connectedDevice","stopDeviceScan","clearInterval","startDeviceScan","_","__","setInterval","manufacturerData","writeCharacteristicWithoutResponseForDevice","command","___","monitorCharacteristicForDevice"],"mappings":"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","sourcesContent":["import { BluetoothDevice } from './types';\nimport { BluetoothManager } from './BleManager';\nimport {\n  Device,\n  BleError,\n  ScanOptions,\n  Characteristic,\n  Subscription,\n  LogLevel,\n} from 'react-native-ble-plx';\n\ninterface MonitorCallback {\n  (error: BleError | null, characteristic: Characteristic | null): void;\n}\n\nconst COMMAND_TO_RESULT_LOOKUP = {\n  // *logall\n  'KmxvZ2FsbA==': (callback: MonitorCallback) => {\n    callback(null, { value: 'ABEAEQARAAIBAAAAAAA6' } as Characteristic); // 00110011001100020100000000003ax\n    callback(null, { value: 'ARcBFwEXARcBFwEXARcBFwEXARc=' } as Characteristic); // 0117011701170117011701170117011701170117x\n    callback(null, { value: 'ARcBFwEXARYBFgEWARguAAAAAAA=' } as Characteristic); // 01170117011701160116011601182e0000000000x\n    callback(null, null);\n  },\n  // *blink\n  KmJsaW5r: (callback: MonitorCallback) => {\n    callback(null, { value: 'T2sA' } as Characteristic);\n    callback(null, null);\n  },\n  // *info\n  'KmluZm8=': (callback: MonitorCallback) => {\n    callback(null, { value: 'U0VUVElOR1MAAAAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'TmFtZTogICBFNzIyOTZERQAAAAA=' } as Characteristic);\n    callback(null, { value: 'VmVyIG5vOiAxMwAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'U3ViIHZlciBubzogMTUuMC4wAAA=' } as Characteristic);\n    callback(null, { value: 'UmVsIGR0ZTogMjYgU2VwIDE5AAA=' } as Characteristic);\n    callback(null, { value: 'VHhwIGx2bDogNAAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'QmF0dCBsdmw6IDEwMCUAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'TWVtIDgzMyBkYXlzAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'QWR2IHdrZXVwOiBOL0EAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'VW5pdHM6IEMAAAAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'TWVtOiAyMDAwMAAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'QWlyIG1vZGUgb2ZmAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'UnVuIGFwcHggMTZocnMAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'RGF0ZSB5eW1tZGRoaG1tOgAAAAA=' } as Characteristic);\n    callback(null, { value: 'LT4gMDA6MDA6MDA6MDA6MDAAAAA=' } as Characteristic);\n    callback(null, { value: 'SWQ6IDI1NQAAAAAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'QnRuIG9uL29mZjogMQAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'VGVtcCBDYWwuIDAAAAAAAAAAAAA=' } as Characteristic);\n    callback(null, { value: 'SHVtIENhbHgxMCAwJQAAAAAAAAA=' } as Characteristic);\n    callback(null, null);\n  },\n  // *bd\n  KmJk: (callback: MonitorCallback) => {\n    callback(null, { value: 'T2sA' } as Characteristic);\n    callback(null, null);\n  },\n  // *lint300\n  'KmxpbnQzMDA=': (callback: MonitorCallback) => {\n    callback(null, { value: 'SW50ZXJ2YWw6IDYwcwAAAAAAAAA=' } as Characteristic);\n    callback(null, null);\n  },\n};\n\nexport class DevBleManager implements BluetoothManager {\n  connectedDevices: { [key: string]: BluetoothDevice | null };\n\n  registeredCallbacks: {\n    [key: string]: MonitorCallback;\n  };\n\n  isScanning: boolean;\n\n  level: LogLevel = LogLevel.None;\n\n  scannerInterval: number | null;\n\n  constructor() {\n    this.connectedDevices = {};\n    this.registeredCallbacks = {};\n    this.isScanning = false;\n    this.scannerInterval = null;\n  }\n  async logLevel(): Promise<LogLevel> {\n    return this.level;\n  }\n\n  setLogLevel(logLevel: LogLevel): void {\n    this.level = logLevel;\n  }\n\n  async connectToDevice(macAddress: string): Promise<BluetoothDevice> {\n    this.connectedDevices[macAddress] = { id: macAddress };\n    if (this.level !== LogLevel.None) {\n      console.log('connect to Device in DEVBlemanager');\n    }\n    return { id: macAddress };\n  }\n\n  async isDeviceConnected(macAddress: string): Promise<boolean> {\n    return !!this.connectedDevices[macAddress];\n  }\n\n  async cancelDeviceConnection(macAddress: string): Promise<BluetoothDevice> {\n    const device = this.connectedDevices[macAddress];\n\n    if (!device) {\n      throw new Error('Device is not connected');\n    }\n\n    this.connectedDevices[macAddress] = null;\n\n    return device;\n  }\n\n  async discoverAllServicesAndCharacteristicsForDevice(\n    macAddress: string\n  ): Promise<BluetoothDevice> {\n    const connectedDevice = this.connectedDevices[macAddress];\n    if (this.level !== LogLevel.None) {\n      console.log('connect to Device in DEVBlemanager');\n    }\n    if (!connectedDevice) {\n      throw new Error(\"Trying to discover services of a device which isn't connected\");\n    }\n\n    return connectedDevice;\n  }\n\n  stopDeviceScan(): void {\n    this.isScanning = false;\n\n    if (this.scannerInterval) clearInterval(this.scannerInterval);\n  }\n\n  startDeviceScan(\n    _: string[] | null,\n    __: ScanOptions | null,\n    callback: (error: BleError | null, scannedDevice: Device | null) => void\n  ): void {\n    this.isScanning = true;\n    if (this.level !== LogLevel.None) {\n      console.log('Scanning in DEVBlemanager');\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - TSC sometimes thinks it's getting setInterval from node, not react-native\n    this.scannerInterval = setInterval(\n      () =>\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - Ignoring this as I don't want to create a full Device object for this development helper.\n        callback(null, {\n          id: 'AB:CD:EF:GH:IJ:KL',\n          manufacturerData: 'MwEBDAN0AFkBtwEMA3QAWQG3AMwCrAAAAAAA',\n        }),\n      1000\n    );\n  }\n\n  async writeCharacteristicWithoutResponseForDevice(\n    macAddress: string,\n    _: string,\n    __: string,\n    command: string,\n    ___: string\n  ): Promise<Characteristic> {\n    const connectedDevice = this.connectedDevices[macAddress];\n    const callback = this.connectedDevices[macAddress];\n    if (connectedDevice && callback) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - ignoring this to not explicitly type the base64d commands etc\n      COMMAND_TO_RESULT_LOOKUP[command](callback);\n      this.connectedDevices[macAddress] = null;\n    } else {\n      throw new Error(\"Trying to write to a device which isn't connected or isn't being monitored\");\n    }\n\n    return {} as Characteristic;\n  }\n\n  monitorCharacteristicForDevice(\n    macAddress: string,\n    _: string,\n    __: string,\n    callback: MonitorCallback,\n\n    ___: string\n  ): Subscription {\n    const connectedDevice = this.connectedDevices[macAddress];\n    if (connectedDevice) {\n      this.registeredCallbacks[macAddress] = callback;\n    } else {\n      throw new Error(\"Trying to write to a device which isn't connected\");\n    }\n\n    return {} as Subscription;\n  }\n}\n"]}