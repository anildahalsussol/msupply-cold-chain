{"version":3,"sources":["BleService.ts"],"names":["Buffer","BLUE_MAESTRO","BT510","moment","ScanMode","LogLevel","BleService","constructor","manager","utils","device","name","Error","macAddress","connectToDevice","console","log","id","deviceType","deviceConstants","isDeviceConnected","cancelDeviceConnection","discoverAllServicesAndCharacteristicsForDevice","stopDeviceScan","callback","scanOptions","scanMode","LowLatency","filteredCallback","err","JSON","stringify","manufacturerData","mfgId","from","readInt16LE","MANUFACTURER_ID","startDeviceScan","command","writeCharacteristicWithoutResponseForDevice","BLUETOOTH_UART_SERVICE_UUID","BLUETOOTH_READ_CHARACTERISTIC_UUID","base64FromString","Promise","resolve","reject","subscription","monitorCharacteristicForDevice","BLUETOOTH_WRITE_CHARACTERISTIC_UUID","_","result","parser","data","done","alreadyDone","transmissionDone","val","str","stringFromBase64","pattern","test","monitoringCallback","value","push","remove","e","message","monitor","monitorCharacteristic","writeCharacteristic","monitorCharacteristicCallback","connectAndDiscoverServices","monitorCallback","table","concat","buffer","slice","map","datum","bufferFromBase64","ind","findIndex","i","readInt16BE","DELIMITER_A","DELIMITER_B","reduce","acc","index","time","temperature","TEMPERATURE_DIVISOR","parse","toString","numEvents","Number","prepareLogs","prepCommand","COMMAND_PREPARE_LOG","replace","writeWithSingleResponse","info","ackLogs","ackCommand","COMMAND_ACK_LOG","sensorLog","downloadCommand","COMMAND_DOWNLOAD","dataLog","writeAndMonitor","logBuffer","unix","readInt32LE","format","Math","round","eventType","readInt8","salt","logInterval","COMMAND_UPDATE_LOG_INTERVAL","match","downloadLogs","COMMAND_BLINK","answer","monitorResultCallback","parsedBase64","defaultInfoLog","batteryLevel","isDisabled","blueMaestroBatteryLevel","batteryLevelStringOrNull","isNaN","normaliseNumber","bt510BatteryLevel","batteryVoltageMv","min","parsedIsDisabled","COMMAND_INFO","COMMAND_DISABLE_BUTTON","retriesLeft","error","getInfo","catch","getInfoWithRetries","toggleButton","toggleButtonWithRetries","downloadLogsWithRetries","blink","blinkWithRetries","updateLogInterval","updateLogIntervalWithRetries","setLogLevel","Verbose"],"mappings":"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","sourcesContent":["import { BTUtilService } from '../BTUtilService';\n\nimport { Buffer } from 'buffer';\nimport { BLUE_MAESTRO, BT510 } from '../index';\nimport { MacAddress } from '../types/common';\nimport moment from 'moment';\nimport {\n  Characteristic,\n  ScanOptions,\n  ScanMode,\n  TypedDevice,\n  InfoLog,\n  MonitorCharacteristicCallback,\n  MonitorCharacteristicParser,\n  ScanCallback,\n  SensorLog,\n  DataLog,\n  LogLevel,\n  Device,\n  BleError,\n  DeviceType,\n} from './types';\nimport { BluetoothManager } from './BleManager';\n\nexport class BleService {\n  manager: BluetoothManager;\n  utils: BTUtilService;\n\n  constructor(manager: BluetoothManager, utils: BTUtilService) {\n    this.manager = manager;\n    manager.setLogLevel(LogLevel.Verbose);\n    // In the future we may want to use our own utils,\n    //  not the ones passed in from the app.\n    //this.utils = new BTUtilService();\n    this.utils = utils;\n  }\n\n  deviceConstants = (device: Pick<Device, 'id' | 'name'> | null): DeviceType => {\n    if (device?.name) {\n      if (device.name === 'BT510') {\n        // Laird doesn't include Manufacurer Data in connect response.\n        return BT510;\n      } else {\n        // Blue Maestro has part of the mac address as its name.\n        // We could check this but...\n        return BLUE_MAESTRO;\n      }\n    }\n    throw new Error('device or name is null');\n  };\n\n  connectToDevice = async (macAddress: MacAddress): Promise<TypedDevice> => {\n    const device = await this.manager.connectToDevice(macAddress);\n    console.log(`BleService connectToDevice, device, id ${device?.id}, name ${device?.name}`);\n    return { id: device.id, deviceType: this.deviceConstants(device) };\n  };\n\n  connectAndDiscoverServices = async (macAddress: MacAddress): Promise<TypedDevice> => {\n    if (await this.manager.isDeviceConnected(macAddress)) {\n      await this.manager.cancelDeviceConnection(macAddress);\n    }\n    const device = await this.connectToDevice(macAddress);\n\n    await this.manager.discoverAllServicesAndCharacteristicsForDevice(macAddress);\n    return device;\n  };\n\n  stopScan = (): void => {\n    this.manager.stopDeviceScan();\n  };\n\n  scanForSensors = (callback: ScanCallback): void => {\n    const scanOptions: ScanOptions = { scanMode: ScanMode.LowLatency };\n    const filteredCallback: ScanCallback = (err: BleError | null, device: Device | null): void => {\n      if (err) {\n        console.log('BleService Scan Error:', JSON.stringify(err));\n      }\n\n      if (device?.manufacturerData) {\n        const mfgId = Buffer.from(device.manufacturerData, 'base64').readInt16LE(0);\n        if (mfgId === BLUE_MAESTRO.MANUFACTURER_ID || mfgId === BT510.MANUFACTURER_ID) {\n          // console.log(\n          //   `BleService Found device: ${device.id}, ${device.name}, ${mfgId}`\n          // );\n          callback(err, device);\n        }\n      }\n    };\n    this.manager.startDeviceScan(null, scanOptions, filteredCallback);\n    console.log('BleService Started scan');\n    //this.manager.logLevel().then(value => console.log(`Log Level ${value}`));\n  };\n\n  writeCharacteristic = async (device: TypedDevice, command: string): Promise<Characteristic> => {\n    //console.log(`BleService Writing to ${device.id}`);\n    return this.manager.writeCharacteristicWithoutResponseForDevice(\n      device.id,\n      device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n      device.deviceType.BLUETOOTH_READ_CHARACTERISTIC_UUID,\n      this.utils.base64FromString(command)\n    );\n  };\n\n  monitorCharacteristic = (\n    device: TypedDevice,\n    callback: MonitorCharacteristicCallback<boolean | SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    //console.log(`BleService Monitoring from ${device.id}`);\n    return new Promise((resolve, reject) => {\n      const subscription = this.manager.monitorCharacteristicForDevice(\n        device.id,\n        device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n        device.deviceType.BLUETOOTH_WRITE_CHARACTERISTIC_UUID,\n        (_, result) => {\n          callback(result, resolve, reject, subscription);\n        }\n      );\n    });\n  };\n\n  writeAndMonitor = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string[], SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | InfoLog | SensorLog[] | DataLog> => {\n    const data: string[] = [];\n    let done = 0;\n    const alreadyDone = (): number => done++;\n\n    const transmissionDone = (val: string): boolean => {\n      const str = this.utils.stringFromBase64(val);\n      const pattern = /.*}$/;\n      const result = pattern.test(str);\n      //console.log(`BleService Monitor receives ${str.slice(0, 10)}, ${result}`);\n      return result;\n    };\n\n    const monitoringCallback: MonitorCharacteristicCallback<SensorLog[] | InfoLog | DataLog> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      if (result?.value) {\n        data.push(result.value);\n        // return to wait for next chunk\n        if (device.deviceType === BLUE_MAESTRO || !transmissionDone(result.value)) return;\n      }\n      try {\n        subscription.remove();\n        if (device.deviceType === BT510 && alreadyDone()) {\n          // Don't call the parser more than once.\n          // (Although it probably doesn't hurt anything,\n          // since the Promise has already resolved and returned the result\n          // to the caller)\n          return;\n        }\n        resolve(parser(data));\n      } catch (e) {\n        reject(new Error(`Parsing failed: ${e.message}`));\n      }\n    };\n\n    const monitor = this.monitorCharacteristic(device, monitoringCallback);\n    await this.writeCharacteristic(device, command);\n\n    return monitor;\n  };\n\n  writeWithSingleResponse = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string, boolean>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    const monitorCharacteristicCallback: MonitorCharacteristicCallback<boolean> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      if (result?.value) {\n        // console.log(\n        //   `BleService SingleMonitor receives ${this.utils\n        //     .stringFromBase64(result.value)\n        //     .slice(0, 10)}`\n        // );\n        try {\n          subscription?.remove();\n          resolve(parser(result.value));\n        } catch (e) {\n          reject(new Error(`Parsing failed: ${e.message}`));\n        }\n      } else reject(new Error(`Command Failed`));\n    };\n    //console.log(`BleService writeWithSingleResponse: ${command}`);\n    const monitor = this.monitorCharacteristic(device, monitorCharacteristicCallback);\n    await this.writeCharacteristic(device, command);\n\n    return monitor;\n  };\n\n  downloadLogs = async (macAddress: MacAddress): Promise<SensorLog[]> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const monitorCallback: MonitorCharacteristicParser<string[], SensorLog[] | DataLog> = (\n      data: string[]\n    ) => {\n      if (device.deviceType === BLUE_MAESTRO) {\n        console.table(data.concat(['BleService']));\n        const buffer = Buffer.concat(\n          data.slice(1).map(datum => this.utils.bufferFromBase64(datum))\n        );\n        const ind = buffer.findIndex(\n          (_, i) =>\n            (i % 2 === 0 && buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_A) ||\n            buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_B\n        );\n\n        return (buffer.slice(0, ind) as Buffer).reduce((acc: SensorLog[], _, index) => {\n          if (index % 2 !== 0) return acc;\n          return [\n            ...acc,\n            { time: '', temperature: buffer.readInt16BE(index) / BLUE_MAESTRO.TEMPERATURE_DIVISOR },\n          ];\n        }, []);\n      } else {\n        // BT510\n        const buffer = Buffer.concat(data.map(datum => this.utils.bufferFromBase64(datum)));\n        const result = JSON.parse(buffer.toString());\n        const numEvents = Number(result.result[0] / 8);\n        console.log(`BleService downloaded ${numEvents} events`);\n        //        console.log(`BleService data is ${result.result[1].slice(0, 10)}`);\n        return { numEvents, data: result.result[1] };\n      }\n    };\n    if (device.deviceType === BT510) {\n      // const FIFO = '0';\n      // const LIFO = '1';\n\n      const prepareLogs = async (): Promise<boolean> => {\n        const prepCommand = BT510.COMMAND_PREPARE_LOG.replace('MODE', '0');\n        return (await this.writeWithSingleResponse(device, prepCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          const result = JSON.parse(info).result;\n          console.log(`BleService Log Prepared, ${result} events`);\n          return !!result;\n        })) as boolean;\n      };\n      const ackLogs = async (numEvents: number): Promise<boolean> => {\n        const ackCommand = BT510.COMMAND_ACK_LOG.replace('NUMEVENTS', numEvents.toString());\n        return (await this.writeWithSingleResponse(device, ackCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          const result = !!(JSON.parse(info).result === numEvents);\n          if (!result) throw new Error(`BleService ${info}`);\n          console.log(`BleService Log Acknowledged, ${numEvents} events`);\n          return result;\n        })) as boolean;\n      };\n\n      let sensorLog = [] as SensorLog[];\n\n      while (await prepareLogs()) {\n        const downloadCommand = BT510.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n        const dataLog = (await this.writeAndMonitor(\n          device,\n          downloadCommand,\n          monitorCallback\n        )) as DataLog;\n        const logBuffer = this.utils.bufferFromBase64(dataLog.data);\n        const log = logBuffer.reduce((acc: SensorLog[], _, index) => {\n          if (index % 8 !== 0) return acc;\n          const time = moment.unix(logBuffer.readInt32LE(index)).format('l HH:mm:ss');\n          //const time = logBuffer.readInt32LE(index);\n          const temperature =\n            Math.round((logBuffer.readInt16LE(index + 4) / BT510.TEMPERATURE_DIVISOR) * 10) / 10;\n          const eventType = logBuffer.readInt8(index + 6);\n          //console.log(`BleService reducing event ${time}, ${temperature}, ${eventType}`);\n          const salt = logBuffer.readInt8(index + 7);\n          if (eventType === 1) {\n            // temperature\n            return [\n              ...acc,\n              {\n                time,\n                temperature,\n                //                  eventType,\n                //                  salt,\n              },\n            ];\n          } else {\n            console.log(\n              `BleService Event type ${eventType}, Data: ${Number(\n                logBuffer.readInt16LE(index + 4)\n              )}, Time: ${time}, Salt: ${salt}`\n            );\n            return [...acc];\n          }\n        }, []);\n        //console.log(`BleService log ${JSON.stringify(log)}`);\n\n        sensorLog = sensorLog.concat(log);\n        //console.log(`BleService sensorLog inside while loop ${JSON.stringify(sensorLog)}`);\n        try {\n          await ackLogs(dataLog.numEvents);\n        } catch (e) {\n          console.log(`BleService Ack failed ${e.message}`);\n        }\n      }\n      // The table only shows up on flipper, and then\n      // only the first 100 items are printed.\n      console.table(\n        [\n          { time: '', temperature: 'BleService' as unknown as number },\n          { time: '', temperature: device.id as unknown as number },\n        ].concat(sensorLog)\n      );\n      return sensorLog;\n    } else {\n      const command = BLUE_MAESTRO.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n      const result = (await this.writeAndMonitor(device, command, monitorCallback)) as SensorLog[];\n      console.table(\n        [\n          { time: '', temperature: 'BleService' as unknown as number },\n          {\n            time: '',\n            temperature: device.id as unknown as number,\n          },\n        ].concat(result)\n      );\n      return result;\n    }\n  };\n\n  updateLogInterval = async (macAddress: MacAddress, logInterval: number): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const command = device.deviceType.COMMAND_UPDATE_LOG_INTERVAL.replace(\n      'INTERVAL',\n      logInterval.toString()\n    );\n    console.log(`BleService logInterval command: ${command}`);\n    const result = await this.writeWithSingleResponse(device, command, data => {\n      const info = this.utils.stringFromBase64(data);\n      return (\n        (device.deviceType === BT510 && JSON.parse(info).result === 'ok') ||\n        !!info.match(/interval/i)\n      );\n    });\n    // Clear logs\n    if (device.deviceType === BT510) {\n      this.downloadLogs(device.id);\n    }\n    //console.log(`BleService logInterval result: ${result}`);\n    return !!result;\n  };\n\n  blink = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    //console.log(`BleService Blinking ${device.deviceType.COMMAND_BLINK}`);\n    const result = (await this.writeWithSingleResponse(\n      device,\n      device.deviceType.COMMAND_BLINK,\n      data => {\n        const answer = this.utils.stringFromBase64(data);\n        //console.log(`BleService data returned from blink write: ${result}`);\n        return !!answer.match(/ok/i);\n      }\n    )) as boolean;\n\n    return result;\n  };\n\n  getInfo = async (macAddress: MacAddress): Promise<InfoLog> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    //console.log(`BleService getInfo, ${device.id}`);\n\n    const monitorResultCallback: MonitorCharacteristicParser<string[], InfoLog> = data => {\n      const parsedBase64 = data.map(this.utils.stringFromBase64);\n      const defaultInfoLog: InfoLog = { batteryLevel: null, isDisabled: true };\n      //console.log(`BleService getInfo parser callback ${parsedBase64[0]}`);\n      const blueMaestroBatteryLevel = (info: string): number | null => {\n        const batteryLevelStringOrNull = info.match(/Batt lvl: [0-9]{1,3}/);\n\n        if (!batteryLevelStringOrNull) return batteryLevelStringOrNull;\n\n        const batteryLevel = Number(batteryLevelStringOrNull[0].match(/[0-9]{1,3}/));\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(batteryLevel, [70, 100]);\n      };\n\n      const bt510BatteryLevel = (info: string): number | null => {\n        if (JSON.parse(info).result !== 'ok') {\n          /* {\"jsonrpc\":\"2.0\",\"id\":3,\"error\":{\"code\":-32602,\"message\":\"Attribute Not Found\"}} */\n          return null;\n        }\n\n        const batteryLevel = Number(JSON.parse(info).batteryVoltageMv);\n        //console.log(`BleService Battery Level ${batteryLevel}`);\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(Math.min(batteryLevel, 3000), [2100, 3000]);\n      };\n\n      const parsedIsDisabled = (info: string): boolean => !!info.match(/Btn on\\/off: 1/);\n\n      if (device.deviceType === BLUE_MAESTRO) {\n        return parsedBase64.reduce((acc, info) => {\n          const isDisabled = parsedIsDisabled(info);\n          const batteryLevel = blueMaestroBatteryLevel(info);\n          if (isDisabled) return { ...acc, isDisabled };\n          if (batteryLevel) return { ...acc, batteryLevel };\n          return acc;\n        }, defaultInfoLog);\n      } else {\n        return { batteryLevel: bt510BatteryLevel(parsedBase64[0]), isDisabled: true };\n      }\n    };\n\n    const result: InfoLog = (await this.writeAndMonitor(\n      device,\n      device.deviceType.COMMAND_INFO,\n      monitorResultCallback\n    )) as InfoLog;\n    console.log(`BleService getInfo ${device.id} ${JSON.stringify(result)}`);\n    return result;\n  };\n\n  toggleButton = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device.deviceType === BT510) {\n      // Laird doesn't have this command\n      return true;\n    }\n    const result = (await this.writeWithSingleResponse(\n      device,\n      BLUE_MAESTRO.COMMAND_DISABLE_BUTTON,\n      data => {\n        return !!this.utils.stringFromBase64(data).match(/ok/i);\n      }\n    )) as boolean;\n    return result;\n  };\n\n  getInfoWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<InfoLog> => {\n    if (!retriesLeft) throw error;\n\n    return this.getInfo(macAddress).catch(err =>\n      this.getInfoWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  toggleButtonWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.toggleButton(macAddress).catch(err =>\n      this.toggleButtonWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  downloadLogsWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<SensorLog[]> => {\n    if (!retriesLeft) throw error;\n\n    return this.downloadLogs(macAddress).catch(err =>\n      this.downloadLogsWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  blinkWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.blink(macAddress).catch(err =>\n      this.blinkWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  updateLogIntervalWithRetries = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.updateLogInterval(macAddress, logInterval).catch(err =>\n      this.updateLogIntervalWithRetries(macAddress, logInterval, retriesLeft - 1, err)\n    );\n  };\n}\n"]}